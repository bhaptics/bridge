x64:
  firstOrDefaultFilePatterns:
    - '!**/node_modules'
    - '!build{,/**/*}'
    - '!dist{,/**/*}'
    - dist/**/*
    - src/main/lib/**/*
    - out/**/*
    - package.json
    - '!**/*.{iml,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,suo,xproj,cc,d.ts,mk,a,o,forge-meta,pdb}'
    - '!**/._*'
    - '!**/electron-builder.{yaml,yml,json,json5,toml,ts}'
    - '!**/{.git,.hg,.svn,CVS,RCS,SCCS,__pycache__,.DS_Store,thumbs.db,.gitignore,.gitkeep,.gitattributes,.npmignore,.idea,.vs,.flowconfig,.jshintrc,.eslintrc,.circleci,.yarn-integrity,.yarn-metadata.json,yarn-error.log,yarn.lock,package-lock.json,npm-debug.log,appveyor.yml,.travis.yml,circle.yml,.nyc_output,.husky,.github,electron-builder.env}'
    - '!.yarn{,/**/*}'
    - '!.editorconfig'
    - '!.yarnrc.yml'
  nodeModuleFilePatterns:
    - '**/*'
    - dist/**/*
    - src/main/lib/**/*
    - out/**/*
nsis:
  script: "!include \"C:\\Workspace\\overwolf\\ow-bridge\\overwolf-electron-vite\\bhaptics-bridge\\node_modules\\@overwolf\\ow-app-builder-lib\\templates\\nsis\\include\\StdUtils.nsh\"\n!addincludedir \"C:\\Workspace\\overwolf\\ow-bridge\\overwolf-electron-vite\\bhaptics-bridge\\node_modules\\@overwolf\\ow-app-builder-lib\\templates\\nsis\\include\"\n!macro _isUpdated _a _b _t _f\n  ${StdUtils.TestParameter} $R9 \"updated\"\n  StrCmp \"$R9\" \"true\" `${_t}` `${_f}`\n!macroend\n!define isUpdated `\"\" isUpdated \"\"`\n\n!macro _isForceRun _a _b _t _f\n  ${StdUtils.TestParameter} $R9 \"force-run\"\n  StrCmp \"$R9\" \"true\" `${_t}` `${_f}`\n!macroend\n!define isForceRun `\"\" isForceRun \"\"`\n\n!macro _isKeepShortcuts _a _b _t _f\n  ${StdUtils.TestParameter} $R9 \"keep-shortcuts\"\n  StrCmp \"$R9\" \"true\" `${_t}` `${_f}`\n!macroend\n!define isKeepShortcuts `\"\" isKeepShortcuts \"\"`\n\n!macro _isNoDesktopShortcut _a _b _t _f\n  ${StdUtils.TestParameter} $R9 \"no-desktop-shortcut\"\n  StrCmp \"$R9\" \"true\" `${_t}` `${_f}`\n!macroend\n!define isNoDesktopShortcut `\"\" isNoDesktopShortcut \"\"`\n\n!macro _isDeleteAppData _a _b _t _f\n  ${StdUtils.TestParameter} $R9 \"delete-app-data\"\n  StrCmp \"$R9\" \"true\" `${_t}` `${_f}`\n!macroend\n!define isDeleteAppData `\"\" isDeleteAppData \"\"`\n\n!macro _isForAllUsers _a _b _t _f\n  ${StdUtils.TestParameter} $R9 \"allusers\"\n  StrCmp \"$R9\" \"true\" `${_t}` `${_f}`\n!macroend\n!define isForAllUsers `\"\" isForAllUsers \"\"`\n\n!macro _isForCurrentUser _a _b _t _f\n  ${StdUtils.TestParameter} $R9 \"currentuser\"\n  StrCmp \"$R9\" \"true\" `${_t}` `${_f}`\n!macroend\n!define isForCurrentUser `\"\" isForCurrentUser \"\"`\n\n!macro addLangs\n  !insertmacro MUI_LANGUAGE \"English\"\n  !insertmacro MUI_LANGUAGE \"German\"\n  !insertmacro MUI_LANGUAGE \"French\"\n  !insertmacro MUI_LANGUAGE \"SpanishInternational\"\n  !insertmacro MUI_LANGUAGE \"SimpChinese\"\n  !insertmacro MUI_LANGUAGE \"TradChinese\"\n  !insertmacro MUI_LANGUAGE \"Japanese\"\n  !insertmacro MUI_LANGUAGE \"Korean\"\n  !insertmacro MUI_LANGUAGE \"Italian\"\n  !insertmacro MUI_LANGUAGE \"Dutch\"\n  !insertmacro MUI_LANGUAGE \"Danish\"\n  !insertmacro MUI_LANGUAGE \"Swedish\"\n  !insertmacro MUI_LANGUAGE \"Norwegian\"\n  !insertmacro MUI_LANGUAGE \"Finnish\"\n  !insertmacro MUI_LANGUAGE \"Russian\"\n  !insertmacro MUI_LANGUAGE \"Portuguese\"\n  !insertmacro MUI_LANGUAGE \"PortugueseBR\"\n  !insertmacro MUI_LANGUAGE \"Polish\"\n  !insertmacro MUI_LANGUAGE \"Ukrainian\"\n  !insertmacro MUI_LANGUAGE \"Czech\"\n  !insertmacro MUI_LANGUAGE \"Slovak\"\n  !insertmacro MUI_LANGUAGE \"Hungarian\"\n  !insertmacro MUI_LANGUAGE \"Arabic\"\n  !insertmacro MUI_LANGUAGE \"Turkish\"\n  !insertmacro MUI_LANGUAGE \"Thai\"\n  !insertmacro MUI_LANGUAGE \"Vietnamese\"\n!macroend\n\n!include \"C:\\Users\\Auejin\\AppData\\Local\\Temp\\t-S5WXJB\\0-messages.nsh\"\n!addplugindir /x86-unicode \"C:\\Users\\Auejin\\AppData\\Local\\electron-builder\\Cache\\nsis\\nsis-resources-3.4.1\\plugins\\x86-unicode\"\n\nVar newStartMenuLink\r\nVar oldStartMenuLink\r\nVar newDesktopLink\r\nVar oldDesktopLink\r\nVar oldShortcutName\r\nVar oldMenuDirectory\r\n\r\n!include \"common.nsh\"\r\n!include \"MUI2.nsh\"\r\n!include \"multiUser.nsh\"\r\n!include \"allowOnlyOneInstallerInstance.nsh\"\r\n\r\n!ifdef INSTALL_MODE_PER_ALL_USERS\r\n  !ifdef BUILD_UNINSTALLER\r\n    RequestExecutionLevel user\r\n  !else\r\n    RequestExecutionLevel admin\r\n  !endif\r\n!else\r\n  RequestExecutionLevel user\r\n!endif\r\n\r\n!ifdef BUILD_UNINSTALLER\r\n  SilentInstall silent\r\n!else\r\n  Var appExe\r\n  Var launchLink\r\n!endif\r\n\r\n!ifdef ONE_CLICK\r\n  !include \"oneClick.nsh\"\r\n!else\r\n  !include \"assistedInstaller.nsh\"\r\n!endif\r\n\r\n!insertmacro addLangs\r\n\r\n!ifmacrodef customHeader\r\n  !insertmacro customHeader\r\n!endif\r\n\r\nFunction .onInit\r\n  Call setInstallSectionSpaceRequired\r\n\r\n  SetOutPath $INSTDIR\r\n  ${LogSet} on\r\n\r\n  !ifmacrodef preInit\r\n    !insertmacro preInit\r\n  !endif\r\n\r\n  !ifdef DISPLAY_LANG_SELECTOR\r\n    !insertmacro MUI_LANGDLL_DISPLAY\r\n  !endif\r\n\r\n  !ifdef BUILD_UNINSTALLER\r\n    WriteUninstaller \"${UNINSTALLER_OUT_FILE}\"\r\n    !insertmacro quitSuccess\r\n  !else\r\n    !insertmacro check64BitAndSetRegView\r\n\r\n    !ifdef ONE_CLICK\r\n      !insertmacro ALLOW_ONLY_ONE_INSTALLER_INSTANCE\r\n    !else\r\n      ${IfNot} ${UAC_IsInnerInstance}\r\n        !insertmacro ALLOW_ONLY_ONE_INSTALLER_INSTANCE\r\n      ${EndIf}\r\n    !endif\r\n\r\n    !insertmacro initMultiUser\r\n\r\n    !ifmacrodef customInit\r\n      !insertmacro customInit\r\n    !endif\r\n\r\n    !ifmacrodef addLicenseFiles\r\n      InitPluginsDir\r\n      !insertmacro addLicenseFiles\r\n    !endif\r\n  !endif\r\nFunctionEnd\r\n\r\n!ifndef BUILD_UNINSTALLER\r\n  !include \"installUtil.nsh\"\r\n!endif\r\n\r\nSection \"install\" INSTALL_SECTION_ID\r\n  !ifndef BUILD_UNINSTALLER\r\n    # If we're running a silent upgrade of a per-machine installation, elevate so extracting the new app will succeed.\r\n    # For a non-silent install, the elevation will be triggered when the install mode is selected in the UI,\r\n    # but that won't be executed when silent.\r\n    !ifndef INSTALL_MODE_PER_ALL_USERS\r\n      !ifndef ONE_CLICK\r\n          ${if} $hasPerMachineInstallation == \"1\" # set in onInit by initMultiUser\r\n          ${andIf} ${Silent}\r\n            ${ifNot} ${UAC_IsAdmin}\r\n              ShowWindow $HWNDPARENT ${SW_HIDE}\r\n              !insertmacro UAC_RunElevated\r\n              ${Switch} $0\r\n                ${Case} 0\r\n                  ${Break}\r\n                ${Case} 1223 ;user aborted\r\n                  ${Break}\r\n                ${Default}\r\n                  MessageBox mb_IconStop|mb_TopMost|mb_SetForeground \"Unable to elevate, error $0\"\r\n                  ${Break}\r\n              ${EndSwitch}\r\n              Quit\r\n            ${else}\r\n              !insertmacro setInstallModePerAllUsers\r\n            ${endIf}\r\n          ${endIf}\r\n      !endif\r\n    !endif\r\n    !include \"installSection.nsh\"\r\n  !endif\r\nSectionEnd\r\n\r\nFunction setInstallSectionSpaceRequired\r\n  !insertmacro setSpaceRequired ${INSTALL_SECTION_ID}\r\nFunctionEnd\r\n\r\n!ifdef BUILD_UNINSTALLER\r\n  !include \"uninstaller.nsh\"\r\n!endif"
